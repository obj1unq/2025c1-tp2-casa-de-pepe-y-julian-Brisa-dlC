import cuentas.*
import casa.*
import cosas.*


describe "Testeo del apartado Casa" {
    method initialize(){
        casaDePepeYJulian.cuenta().saldo(100000)
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)

    }
    test "La lista de las cosas compradas es heladera, cama y plancha" {
        assert.equals([heladera, cama, plancha], casaDePepeYJulian.cosasCompradas())
    }

    test "Cantidad de cosas compradas es 3" {
        assert.equals(3, casaDePepeYJulian.cantidadDeCosasCompradas())
    }

    test "Tiene algún electrodoméstico" {
        assert.that(casaDePepeYJulian.tieneAlgun(electrodomestico))
    }

    test "Tiene algún mueble" {
        assert.that(casaDePepeYJulian.tieneAlgun(electrodomestico))
    }

    test "No tiene alguna comida" {
        assert.notThat(casaDePepeYJulian.tieneAlgun(comida))
    }

    test "Viene de comprar un electrodoméstico es verdadero" {
        assert.that(casaDePepeYJulian.vieneDeComprar(electrodomestico))
    }

    test "Viene de comprar un mueble es false" {
        assert.notThat(casaDePepeYJulian.vieneDeComprar(mueble))
    }

    test "Es derrochona (ya que gastó 29200)" {
        assert.that(casaDePepeYJulian.esDerrochona())
    }

    test "La compra más cara es heladera" {
        assert.equals(heladera, casaDePepeYJulian.compraMasCara())
    }

    test "Los electrodomésticos compramos son la heladera y la plancha" {
        assert.equals([heladera, plancha], casaDePepeYJulian.comprados(electrodomestico))
    }

    test "los muebles comprados son: la cama y nada más" {
        assert.equals([cama], casaDePepeYJulian.comprados(mueble))
    }

    test "no hay comida comprada" {
        assert.equals([], casaDePepeYJulian.comprados(comida))
    }

    test "no es una mala época" {
        assert.notThat(casaDePepeYJulian.malaEpoca())
    }

    test "falta comprar tira de asado y paquete de fideos" {
        assert.equals([tiraDeAsado, paqueteDeFideos], casaDePepeYJulian.queFaltaComprar([tiraDeAsado, paqueteDeFideos, plancha]))
    }

    test "falta comida" {
        assert.that(casaDePepeYJulian.faltaComida())
    }

    test "las categorías compradas son electrodoméstico y mueble" {
        assert.equals(#{electrodomestico, mueble}, casaDePepeYJulian.categoriasCompradas())
    }
}

describe "Testeo del apartado Cuentas Bancarias, sección cuenta corriente" {
    method initialize(){
        cuentaCorriente.saldo(20)
    }

    test "Depósito de 1000 pesos" {
        cuentaCorriente.depositar(1000)
        assert.equals(1020, cuentaCorriente.saldo())
    }

    test "Extracción de 50 con saldo previo de 1020" {
        cuentaCorriente.depositar(1000)
        cuentaCorriente.extraer(50)
        assert.equals(970, cuentaCorriente.saldo())
    }

    test "No se puede extraer 2000 con saldo de 20" {
        assert.throwsExceptionWithMessage("No cuenta con suficiente saldo para realizar la extracción", { cuentaCorriente.extraer(2000) })
    }
}

describe "Testeo del apartado Cuentas Bancarias, sección cuenta con gastos" {
    method initialize(){
        cuentaConGastos.costoPorOperacion(20)
        cuentaConGastos.saldo(500)
    }
    test "Depósito de 1000 pesos" {
        cuentaConGastos.depositar(1000)
        assert.equals(1480, cuentaConGastos.saldo())
    }
    test "Extracción de 30 con saldo de 1480" {
        cuentaConGastos.depositar(1000)
        cuentaConGastos.extraer(30)
        assert.equals(1450, cuentaConGastos.saldo())
    }

    test "No se puede depositar 2000" {
        cuentaConGastos.depositar(1000)
        cuentaConGastos.extraer(30)
        assert.throwsExceptionWithMessage("No se puede depositar más de 1000 por operación", { cuentaConGastos.depositar(2000) })
        assert.equals(1450, cuentaConGastos.saldo())
    }

    test "Extracción de 2000 con saldo de 1450" {
        cuentaConGastos.depositar(1000)
        cuentaConGastos.extraer(30)
        cuentaConGastos.extraer(2000)
        assert.equals(-550, cuentaConGastos.saldo())
    }
}

describe "Casa con cuenta corriente con saldo 1000" {
    method initialize(){
        casaDePepeYJulian.cuenta().saldo(1000)
    }
    test "Saldo 600 luego de comprar una tira de asado y un paquete de fideos" {
        casaDePepeYJulian.comprar(tiraDeAsado)
        casaDePepeYJulian.comprar(paqueteDeFideos)
        assert.equals(600, casaDePepeYJulian.cuenta().saldo())
    }
}